#========================================#
# Linux Setup Guides - PostInstallations #
#	- ToDo				 #
#========================================#

Table of Contents:
	References
	0. Pre-Requisites
	1. Post-Installations
		- Setup sudo
		- Setup Swapfile
		- User Management
		- Install Essential Packages
		- Install Desktop Environment / Window Manager
		- Setup Configs
		- (OPTIONAL) Setup xinitrc (if using startx - no display manager)
		- (OPTIONAL) Setup .{bash_|zsh_}profile

References:
	- Setup:
		Window Managers:
			BSPWM / SXHKD : https://www.instructables.com/Bspwm-Installation-and-Configuration/
	- Post Installation : 

#===================
# 0. Pre-Requisites
#===================
- Choose a Display Server (X11 | Wayland)
	```
	In Linux, a display server is used to render a desktop environment or a window manager
	- To display Graphical environments (GUI)
	```
	- Select a Desktop Environment (aka Desktop - DE) / Window Manager (WM)
		- Desktop Environments:
			KDE
			GNOME
			LXDE
			Deepin
			XFCE
		- Window Managers
			X11
				AwesomeWM
				BSPWM
				DWM
				i3{-gap}
				Qtile
			Wayland
				Sway

- (OPTIONAL) Choose a Login Manager (aka Display Manager)
	```
	You can ignore this if you are using terminal startup login (startx/sx)
	```
	- LoginDM
	- gdm
	- sddm

- List packages to download
	```
	Specify all essential packages here to be download
		- For easy reference

	- Categories that Desktop Environments have to turn a wm into a de

	- Please refer to my 'Essential Packages' List (package-list.txt) for more packages to choose from
	```
	- Text Editor
		vim
	- File Manager
		pcmanfm
	- Status Bar
		polybar
	- System Monitor
		conky
	- Compositor
		picom
	- Terminal Emulator
		terminator
	- Shell
		zsh



#=======================
# 1. Post-Installations
#=======================
- Enable multilib repository
	```
	If you want to run 32-bit application on your 64-bit systems, uncomment/enable the multilib repository to achieve it.

	File: /etc/pacman.conf
	```
	- Manual:
		$EDITOR /etc/pacman.conf

		> Uncomment [multilib]
		> Uncomment include = /etc/pacman.d/mirrorlist

	- Automatic:
		```
		Regex Pattern:
			"/\[multilib\]/,/Include/"
			's/^#//'
		```
		sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

- Setup sudo
	```
	For a user to use sudo, it needs to have permission or is in a group with permission
		Most distros uses the group 'wheel' or 'user' as their admin group
	- Enable 'wheel' or 'user' in /etc/sudoers by uncommenting '%wheel (ALL:ALL) ALL' in /etc/sudoers
		- to allow users in 'wheel' group to use sudo

	File: /etc/sudoers
	```
	- Manual
		$EDITOR sudo visudo
		> Uncomment '%wheel (ALL:ALL) ALL'
		> Save

	- Automatic
		```
		Use sed to uncommment '%wheel (ALL:ALL) ALL' in /etc/sudoers
		```
		sed -i 's/^#\s*\(%wheel\s\+ALL=(ALL:ALL)\s\+ALL\)/\1/' /etc/sudoers

- Setup Swapfile
	- Create /swapfile of size (n)
		```
		Syntax: fallocate -l [size] /swapfile
		Parameters:
			size : Size of swapfile
				- n(KiB|MiB|GiB)
				NOTE: 
					- Recommend to create a swapfile about 2x your physical RAM
		```
		fallocate -l 8GiB /swapfile

	- Change Permission of swapfile to 600
		```
		Syntax: chmod [permission_number] /swapfile
		```
		chmod 600 /swapfile

	- Make swapfile to swapfile type
		mkswap /swapfile

	- Activate and turn on swapfile
		swapon /swapfile

	- Write swapfile into File Systems Table (fstab)
		```
		- for swapfile to mount automatically on startup
		```
		echo "# /swapfile" >> /etc/fstab
		echo "/swapfile none swap defaults 0 0" >> /etc/fstab



- User Management
	```
	
	```
	- Create a new user
		```
		Syntax: useradd -m -g [primary-group] -G [secondary,groups] -d [home-directory] {username}
		Parameters:
			-m : Specify to create a home directory for the user
			-g [primary-group] : add user to primary-group
			-G [secondary,groups] : add user to secondary groups
			-d [home-directory] : Explicitly specify where to create the home directory for the user
		```
		useradd -m -g wheel -d /home/profiles/user user

	- Change password
		```
		Syntax: passwd {username}
		Note:
			- if {username} is empty (i.e. passwd)
				- Default to changing root password
		```
		passwd user

	- Verify user
		- Switch user to {username}
			```
			Syntax: su - {username}
			```
			su - user

		- Check user
			```
			If successful : result should show 'root'
			```
			sudo whoami


- Install Essential Packages
	```
	Install all packages specified in [List packages to download]
	```


- Install Display Server:
	```
	The Display Server [xorg] and 
	- related packages:
		xorg-xinit : For Startx
	- For X11 usage and Graphical Display
	```
	- X
		# If your distro is
		Arch-based :
			sudo pacman -S xorg
			sudo pacman -S xorg-xinit


- Install Desktop Environment / Window Manager
	- Desktop Environments
		- GNOME
		- KDE
			If your distro is Debian:
				sudo apt-get install kde-plasma
		- XFCE
	- Window Managers
		- bspwm
			via Package Manager:
				If your distro is 
					Debian (via Apt):
						# Install bspwm
							sudo apt-get install bspwm
						# Install sxhkd
							sudo apt-get install sxhkd
					Arch (via Pacman):
						# Install bspwm
							sudo pacman -S bspwm
						# Install sxhkd
							sudo pacman -S sxhkd
			via Manual:	
				```
				NOTE:
					- With this method, you might need to install additional dependencies or have missing libraries you need to download seperately
						References: https://askubuntu.com/questions/392718/problems-installing-bspwm

						If your distro is Debian-based:
							- Install package [apt-file]
								# This program will find the relevant package for the library
									sudo apt-get install apt-file

								# Update after finding
									sudo apt-file update
									Syntax: apt-file search "library_header_fullname"
									Usage: 
										apt-file search "X11/extensions/Xinerama.h"

								# Install returned package
				```
				# Clone Make and Install bspwm
					git clone https://github.com/baskerville/bspwm.git
					make && sudo make install
				# Clone, Make and Install sxhkd
					git clone https://github.com/baskerville/sxhkd.git
					make && sudo make install	
	
- Setup Configs
	- Desktop Environments / Window Managers
		- Window Managers
			- bspwm
				```
				Steps:
					1. Make Directories [~/.config/bspwm, ~/.config/sxhkd]
					2. Copy bspwmrc and sxhkdrc examples to ~/.config/bspwm and ~/.config/sxhkd
					3. Change permissions of bspwmrc and sxhkdrc to Executable for use
				```
				- Make Directories [~/.config/bspwm, ~/.config/sxhkd]
					mkdir -p ~/.config/bspwm ~/.config/sxhkd
				- Copy bspwmrc and sxhkdrc examples to ~/.config/bspwm and ~/.config/sxhkd
					cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm/bspwmrc
					cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd/sxhkdrc
				- Change permissions of bspwmrc and sxhkdrc to Executable for use
					chmod +x ~/.config/bspwm/bspwmrc
					chmod +x ~/.config/sxhkd/sxhkdrc



- (OPTIONAL) Setup xinitrc (if using startx - no display manager)
	```
	The '.xinitrc' dotfile is the X initialization Resource Control file
	- Used alongside startx as a settings file to know what to run when passed
	
	- Contents to put into .xinitrc:
		- Things to run automatically when 'startx' or 'sx' is ran
	NOTES:
		- Try not to put too many functions here as this file is processed on every startx
			- The more you put, the longer it will take to startup the graphical environment

		- Place functions that requires a one-time startup load (i.e. Networking startup etc.) in
			~/.bash_profile (bash shell profile) or 
			~/.profile (generic shell profile) or
			~/.zsh_profile (ZSH shell profile)
		  to reduce the amount of workload on the startup process

		- Place '&' behind commands in .xinitrc to run them in the background

	Contents:
		exec [wm/de]

	Syntax: 
		To start session with startx : startx ~/.xinitrc {params}

	File: ~/.xinitrc
	Notes:
		# IF there's error running due to
		[1] command error
			- Ensure that you place '#!/bin/bash' at the top to force the script to run with bash
			OR
			- Change default shell to bash

	- Recommended Contents:
		[1] Associative Array
			DEFAULT_ENV="bspwm"
			declare -a list_of_env=(
				# Key : Name of Window Manager/Desktop Environment
				# Value : command to start the exec and its parameters
				# Syntax: [wm/de]="command"
				[bspwm]="bspwm"
			)
			SESSION="${1:-$DEFAULT_ENV}"
			exec ${list_of_env["$SESSION"]}

		[2] Case
			DEFAULT_ENV="bspwm"
			SESSION="${1:-$DEFAULT_ENV}
			case "$SESSION" in
				"bspwm")
					exec bspwm
					;;
				*)
					# Default
					echo "Invalid Environment"
					;;
			esac
	```
	echo "exec [wm | de]" >> ~/.xinitrc


- (OPTIONAL) Setup .{bash_|zsh_}profile
	```
	The profile files related to the default shell will be executed on first startup
	- i.e. on the first bash/zsh startup after logging in
		- .profile will be ran (general)
		- .bash_profile will be ran (if shell is Bash)
		- .zsh_profile will be ran (if shell is Zsh)

	File: ~/.{bash_|zsh_}profile
	```
	# One-time Network setup (if you dont want to enable Network automatically)
		echo "sudo systemctl start NetworkManager" | tee -a ~/.bash_profile
	

